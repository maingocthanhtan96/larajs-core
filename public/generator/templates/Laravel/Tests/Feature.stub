<?php

use App\Models\{{MODEL}};
use Illuminate\Foundation\Testing\WithFaker;

uses(WithFaker::class);

beforeAll(function () {
    $faker = $this->faker;
    $this->data = [
        {{FIELDS}}
        //{{SEEDER_NOT_DELETE_THIS_LINE}}
    ];
});

test('get list {{ROUTE_RESOURCE}} -> 200', function () {
    {{MODEL}}::factory()->count(5)->create();
    $response = asAdmin()
        ->get(route('{{ROUTE_RESOURCE}}.index', []))
        ->assertOK()
        ->json();

    expect($response)
        ->toHaveKeys(['meta', 'data'])
        ->and($response['meta']['total'])
        ->toBeInt()
        ->toBe(5)
        ->and($response['data'])
        ->toBeArray()
        ->toHaveCount(5);
});

test('store a {{MODEL_TEST}} -> 201', function () {
    $response = asAdmin()
        ->post(route('{{ROUTE_RESOURCE}}.store'), $this->data)
        ->assertCreated()
        ->json();

    expect($response)
        ->toHaveKeys(['message', 'data'])
        ->and($response['message'])
        ->toBe(trans('messages.create'))
        ->and($response['data'])
        ->not->toBeEmpty();
});

test('show a {{MODEL_TEST}} -> 200', function () {
    ${{MODEL_VARIABLE}} = {{MODEL}}::factory()->create();
    $response = asAdmin()
        ->get(route('{{ROUTE_RESOURCE}}.show', ['{{MODEL_SINGULAR}}' => ${{MODEL_VARIABLE}}->id]))
        ->assertOK()
        ->json();

    expect($response)
        ->toHaveKeys(['data'])
        ->and($response['data'])
        ->id->toBe(${{MODEL_VARIABLE}}->id);
});

test('update a {{MODEL_TEST}} -> 200', function () {
    ${{MODEL_VARIABLE}} = {{MODEL}}::factory()->create();
    $response = asAdmin()
        ->put(route('{{ROUTE_RESOURCE}}.update', ['{{MODEL_SINGULAR}}' => ${{MODEL_VARIABLE}}->id]), $this->data)
        ->assertOK()
        ->json();

    expect($response)
        ->toHaveKeys(['message', 'data'])
        ->and($response['message'])
        ->toBe(trans('messages.update'))
        ->and($response['data'])
        ->id->toBe(${{MODEL_VARIABLE}}->id);
});

test('destroy a {{MODEL_TEST}} -> 200', function () {
    ${{MODEL_VARIABLE}} = {{MODEL}}::factory()->create();
    $response = asAdmin()
        ->delete(route('{{ROUTE_RESOURCE}}.destroy', ['{{MODEL_SINGULAR}}' => ${{MODEL_VARIABLE}}->id]))
        ->assertOK()
        ->json();

    expect($response)
        ->toHaveKey('message')
        ->message->toBeString()
        ->toBe(trans('messages.delete'));
});
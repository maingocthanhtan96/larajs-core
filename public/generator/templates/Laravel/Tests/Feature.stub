<?php

use App\Models\{{MODEL}};

beforeEach(function () {
    $faker = $this->faker;
    $this->data = [
        {{FIELDS}}
        //{{SEEDER_NOT_DELETE_THIS_LINE}}
    ];
});

test('get table {{MODEL_TEST}}', function () {
    $response = $this->signIn()
        ->get(route('{{ROUTE_RESOURCE}}.index', $this->query))
        ->assertOK()
        ->json('data');

    expect($response)
        ->toHaveKey('total')
        ->total->toBeInt()
        ->and($response['items'])
        ->toBeArray();
});

test('store a {{MODEL_TEST}}', function () {
    $response = $this->signIn()
        ->post(route('{{ROUTE_RESOURCE}}.store'), $this->data)
        ->assertOK()
        ->json('data');

    expect($response)->not->toBeEmpty();
});

test('show a {{MODEL_TEST}}', function () {
    ${{MODEL_VARIABLE}} = {{MODEL}}::factory()->create();
    $response = $this->signIn()
        ->get(route('{{ROUTE_RESOURCE}}.show', ['{{MODEL_SINGULAR}}' => ${{MODEL_VARIABLE}}->id]))
        ->assertOK()
        ->json('data');

    expect($response)->id->toBe(${{MODEL_VARIABLE}}->id);
});

test('update a {{MODEL_TEST}}', function () {
    ${{MODEL_VARIABLE}} = {{MODEL}}::factory()->create();
    $response = $this->signIn()
        ->put(route('{{ROUTE_RESOURCE}}.update', ['{{MODEL_SINGULAR}}' => ${{MODEL_VARIABLE}}->id]), $this->data)
        ->assertOK()
        ->json('data');

    expect($response)->id->toBe(${{MODEL_VARIABLE}}->id);
});

test('destroy a {{MODEL_TEST}}', function () {
    ${{MODEL_VARIABLE}} = {{MODEL}}::factory()->create();
    $response = $this->signIn()
        ->delete(route('{{ROUTE_RESOURCE}}.destroy', ['{{MODEL_SINGULAR}}' => ${{MODEL_VARIABLE}}->id]))
        ->assertOK()
        ->json();

    expect($response)->message->toBeString();
});
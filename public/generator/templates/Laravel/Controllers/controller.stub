<?php

namespace App\Http\Controllers\Api\{{VERSION}};

use App\Http\Controllers\Controller;
use App\Http\Requests\{{VERSION}}\Store{{MODEL_CLASS}}Request;
use App\Http\Resources\{{VERSION}}\{{MODEL_CLASS}}Resource;
use App\Models\{{MODEL_CLASS}};
use App\Services\{{VERSION}}\{{MODEL_CLASS}}\{{MODEL_CLASS}}Service;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Routing\Controllers\HasMiddleware;
use Illuminate\Routing\Controllers\Middleware;
use Knuckles\Scribe\Attributes\ResponseFromApiResource;
use LaraJS\Permission\Enums\PermissionEnum;
use Symfony\Component\HttpFoundation\Response;

/**
 * @group {{CONTROLLER_CLASS}}
 * @authenticated
 */
class {{CONTROLLER_CLASS}}Controller extends Controller implements HasMiddleware
{
    public function __construct(private readonly {{MODEL_CLASS}}Service ${{MODEL_CLASS_PARAM}}Service)
    {
    }

    /**
     * Get the middleware that should be assigned to the controller.
     */
    public static function middleware(): array
    {
        return [
            new Middleware('permission:' . PermissionEnum::VISIT->name, ['only' => ['index']]),
            new Middleware('permission:' . PermissionEnum::CREATE->name, ['only' => ['store']]),
            new Middleware('permission:' . PermissionEnum::EDIT->name, ['only' => ['show', 'update']]),
            new Middleware('permission:' . PermissionEnum::DELETE->name, ['only' => ['destroy']]),
        ];
    }

    /**
     * Get {{MODEL_CLASS_PARAM_LIST}}
     * @queryParam select string Select column. No-example
     * @queryParam include string[] Specify relationships and aggregate. No-example
     * @queryParam filter string. No-example
     * @queryParam search[value] string The search value. No-example
     * @queryParam search[column] string The search column. No-example
     * @queryParam date[value] string[] The date value. No-example
     * @queryParam date[column] string The date column. No-example
     * @queryParam orderBy string. Example: -id
     * @queryParam pagination[page] number Page equals -1 get all records. Example: 1
     * @queryParam pagination[limit] number Limit. Example: 25
     * @queryParam pagination[type] string Type pagination: simple | cursor | default. Example: default
     */
    #[ResponseFromApiResource({{MODEL_CLASS}}Resource::class, {{MODEL_CLASS}}::class, collection: true, with: [], paginate: 5)]
	public function index(Request $request): JsonResponse
	{
        ${{MODEL_CLASS_PARAM_LIST}} = $this->{{MODEL_CLASS_PARAM}}Service->findAll($request);

        return $this->responseResource({{MODEL_CLASS}}Resource::collection(${{MODEL_CLASS_PARAM_LIST}}));
	}

    /**
     * Get {{MODEL_CLASS_PARAM}}
     *
     * @queryParam select string Select column. No-example.
     * @queryParam include string[] Specify relationships and aggregate. No-example.
     */
    #[ResponseFromApiResource({{MODEL_CLASS}}Resource::class, {{MODEL_CLASS}}::class, with: [])]
	public function show(int $id, Request $request): JsonResponse
	{
        ${{MODEL_CLASS_PARAM}} = $this->{{MODEL_CLASS_PARAM}}Service->find($id, $request);

        return $this->responseResource({{MODEL_CLASS}}Resource::make(${{MODEL_CLASS_PARAM}}));
	}

    /**
     * Create {{MODEL_CLASS_PARAM}}
     *
     * @apiResource App\Http\Resources\V1\{{MODEL_CLASS}}Resource status=201
     *
     * @apiResourceModel App\Models\{{MODEL_CLASS}}
     *
     * @apiResourceAdditional message="Create successfully!"
     */
	public function store(Store{{MODEL_CLASS}}Request $request): JsonResponse
	{
        ${{MODEL_CLASS_PARAM}} = $this->{{MODEL_CLASS_PARAM}}Service->create($request->validated());

        return $this->responseResource({{MODEL_CLASS}}Resource::make(${{MODEL_CLASS_PARAM}}), trans('messages.create'), Response::HTTP_CREATED);
	}

    /**
     * Update {{MODEL_CLASS_PARAM}}
     *
     * @apiResource App\Http\Resources\{{VERSION}}\{{MODEL_CLASS}}Resource
     *
     * @apiResourceModel App\Models\{{MODEL_CLASS}}
     *
     * @apiResourceAdditional message="Update successfully!"
     */
	public function update(int $id, Store{{MODEL_CLASS}}Request $request): JsonResponse
	{
        ${{MODEL_CLASS_PARAM}} = $this->{{MODEL_CLASS_PARAM}}Service->update($id, $request->validated());

        return $this->responseResource({{MODEL_CLASS}}Resource::make(${{MODEL_CLASS_PARAM}}), trans('messages.update'));
	}

    /**
     * Delete {{MODEL_CLASS_PARAM}}
     *
     * @response 200 {"message": "Delete successfully!"}
     */
    public function destroy(int $id): JsonResponse
    {
        $this->{{MODEL_CLASS_PARAM}}Service->delete($id);

        return $this->responseMessage(trans('messages.delete'));
    }
}

<?php

namespace App\Http\Controllers\Api\{{VERSION}};

use App\Http\Controllers\Controller;
use App\Http\Requests\{{VERSION}}\Store{{MODEL_CLASS}}Request;
use App\Http\Resources\{{VERSION}}\{{MODEL_CLASS}}Resource;
use App\Services\{{VERSION}}\{{MODEL_CLASS}}\{{MODEL_CLASS}}Service;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

/**
 * @group {{CONTROLLER_CLASS}}
 * @authenticated
 */
class {{CONTROLLER_CLASS}}Controller extends Controller
{
    public function __construct(private readonly {{MODEL_CLASS}}Service ${{MODEL_CLASS_PARAM}}Service)
    {
        parent::permissions();
    }

    /**
     * List
     * @queryParam select string Select column. No-example.
     * @queryParam include string[] Specify relationships and aggregate. No-example.
     * @queryParam filter string https://www.jsonapi.net/usage/reading/filtering.html. No-example.
     * @queryParam search[value] string The search value. No-example.
     * @queryParam search[column] string The search column. No-example.
     * @queryParam date[value] string[] The date value. No-example.
     * @queryParam date[column] string The date column. No-example.
     * @queryParam orderBy string https://www.jsonapi.net/usage/reading/sorting.html. Example: -id.
     * @queryParam limit number Limit. Example: 25.
     * @queryParam page number Page equals -1 get all records. Example: 1
     *
     * @apiResourceCollection App\Http\Resources\V1\{{MODEL_CLASS}}Resource
     *
     * @apiResourceModel App\Models\{{MODEL_CLASS}} paginate=5
     */
	public function index(Request $request): JsonResponse
	{
        ${{MODEL_CLASS_PARAM_LIST}} = $this->{{MODEL_CLASS_PARAM}}Service->list($request);

        return $this->responseResource({{MODEL_CLASS}}Resource::collection(${{MODEL_CLASS_PARAM_LIST}}));
	}

    /**
     * Create
     *
     * @apiResource App\Http\Resources\V1\{{MODEL_CLASS}}Resource status=201
     *
     * @apiResourceModel App\Models\{{MODEL_CLASS}}
     *
     * @apiResourceAdditional message="Create successfully!"
     */
	public function store(Store{{MODEL_CLASS}}Request $request): JsonResponse
	{
        ${{MODEL_CLASS_PARAM}} = $this->{{MODEL_CLASS_PARAM}}Service->create($request->validated());

        return $this->responseResource({{MODEL_CLASS}}Resource::make(${{MODEL_CLASS_PARAM}}), trans('messages.create'), Response::HTTP_CREATED);
	}

    /**
     * Get
     *
     * @queryParam select string Select column. No-example.
     * @queryParam include string[] Specify relationships and aggregate. No-example.
     *
     * @apiResource App\Http\Resources\V1\{{MODEL_CLASS}}Resource
     *
     * @apiResourceModel App\Models\{{MODEL_CLASS}}
     */
	public function show(int ${{MODEL_CLASS_PARAM}}, Request $request): JsonResponse
	{
        ${{MODEL_CLASS_PARAM}} = $this->{{MODEL_CLASS_PARAM}}Service->find(${{MODEL_CLASS_PARAM}}, $request);

        return $this->responseResource({{MODEL_CLASS}}Resource::make(${{MODEL_CLASS_PARAM}}));
	}

    /**
     * Update
     *
     * @apiResource App\Http\Resources\{{VERSION}}\{{MODEL_CLASS}}Resource
     *
     * @apiResourceModel App\Models\{{MODEL_CLASS}}
     *
     * @apiResourceAdditional message="Update successfully!"
     */
	public function update(int ${{MODEL_CLASS_PARAM}}, Store{{MODEL_CLASS}}Request $request): JsonResponse
	{
        ${{MODEL_CLASS_PARAM}} = $this->{{MODEL_CLASS_PARAM}}Service->update(${{MODEL_CLASS_PARAM}}, $request->validated());

        return $this->responseResource({{MODEL_CLASS}}Resource::make(${{MODEL_CLASS_PARAM}}), trans('messages.update'));
	}

    /**
     * Delete
     *
     * @response 200 {"message": "Delete successfully!"}
     */
    public function destroy(int ${{MODEL_CLASS_PARAM}}): JsonResponse
    {
        $this->{{MODEL_CLASS_PARAM}}Service->delete(${{MODEL_CLASS_PARAM}});

        return $this->responseMessage(trans('messages.delete'));
    }
}

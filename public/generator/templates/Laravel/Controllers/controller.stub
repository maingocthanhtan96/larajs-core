<?php

namespace App\Http\Controllers\Api\{{VERSION}};

use App\Http\Controllers\Controller;
use App\Http\Requests\{{VERSION}}\Store{{MODEL_CLASS}}Request;
use App\Services\{{VERSION}}\{{MODEL_CLASS}}\{{MODEL_CLASS}}Service;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

/**
 * @group {{CONTROLLER_CLASS}}
 * @authenticated
 */
class {{CONTROLLER_CLASS}}Controller extends Controller
{
    public function __construct(private readonly {{MODEL_CLASS}}Service ${{MODEL_CLASS_PARAM}}Service)
    {
        parent::permissions();
    }

    /**
     * List
     * @queryParam select string Select column. No-example.
     * @queryParam include string[] Specify relationships and aggregate. No-example.
     * @queryParam filter string https://www.jsonapi.net/usage/reading/filtering.html. No-example.
     * @queryParam search[value] string The search value. No-example.
     * @queryParam search[column] string The search column. No-example.
     * @queryParam date[value] string[] The date value. No-example.
     * @queryParam date[column] string The date column. No-example.
     * @queryParam orderBy string The sort records. Example: id desc.
     * @queryParam limit number Limit. Example: 25.
     * @queryParam page number Page. Example: 1.
     */
	public function index(Request $request): JsonResponse
	{
        ${{MODEL_CLASS_PARAM_LIST}} = $this->{{MODEL_CLASS_PARAM}}Service->list($request);

        return $this->sendData(${{MODEL_CLASS_PARAM_LIST}});
	}

    /**
     * Create
     */
	public function store(Store{{MODEL_CLASS}}Request $request): JsonResponse
	{
        ${{MODEL_CLASS_PARAM}} = $this->{{MODEL_CLASS_PARAM}}Service->create($request->validated());

        return $this->sendData(${{MODEL_CLASS_PARAM}}, trans('messages.create'), Response::HTTP_CREATED);
	}

	/**
	 * Get
	 *
	 * @queryParam select string Select column. No-example.
	 * @queryParam include string[] Specify relationships and aggregate. No-example.
	 */
	public function show(int ${{MODEL_CLASS_PARAM}}, Request $request): JsonResponse
	{
        ${{MODEL_CLASS_PARAM}} = $this->{{MODEL_CLASS_PARAM}}Service->find(${{MODEL_CLASS_PARAM}}, $request);

        return $this->sendData(${{MODEL_CLASS_PARAM}});
	}

	/**
	 * Update
	 */
	public function update(int ${{MODEL_CLASS_PARAM}}, Store{{MODEL_CLASS}}Request $request): JsonResponse
	{
        ${{MODEL_CLASS_PARAM}} = $this->{{MODEL_CLASS_PARAM}}Service->update(${{MODEL_CLASS_PARAM}}, $request->validated());

        return $this->sendData(${{MODEL_CLASS_PARAM}}, trans('messages.update'));
	}

	/**
	 * Delete
	 */
    public function destroy(int ${{MODEL_CLASS_PARAM}}): JsonResponse
    {
        $this->{{MODEL_CLASS_PARAM}}Service->destroy(${{MODEL_CLASS_PARAM}});

        return $this->sendMessage(trans('messages.delete'));
    }
}

<?php

namespace App\Http\Controllers\Api\v1;

use App\Repositories\{{MODAL_CLASS}}\{{MODAL_CLASS}}Interface;
use App\Http\Controllers\Controller;
use App\Http\Requests\Store{{MODAL_CLASS}}Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;

/**
 * @group {{CONTROLLER_CLASS}}
 * @authenticated
 */
class {{CONTROLLER_CLASS}}Controller extends Controller
{
    public function __construct(private readonly {{MODAL_CLASS}}Interface ${{MODAL_CLASS_PARAM}}Repository)
    {
        permission_handle($this);
    }

    /**
     * List
     *
     * @queryParam search string Search columns specified by column_search. No-example
     * @queryParam limit number Limit. Example: 25.
     * @queryParam page number Page. Example: 1
     * @queryParam direction string Direction (asc, desc). No-example
     * @queryParam orderBy string Field order. No-example
     * @queryParam column_date string Field default order. No-example
     * @queryParam between_date string[] Start date and End date. No-example
     * @queryParam select string[] Select column. No-example
     * @queryParam column_search string[] Specify columns search. No-example
     * @queryParam relationship string[] Specify relationships. Example: No-example
     * @queryParam aggregate string[] Specify functions(count, exists, sum, min, max, avg). No-example
     */
	public function index(Request $request): JsonResponse
	{
		try {
            ${{MODAL_CLASS_PARAM_LIST}} = $this->{{MODAL_CLASS_PARAM}}Repository->index($request);

			return $this->jsonTable(${{MODAL_CLASS_PARAM_LIST}});
		} catch (\Exception $e) {
			return $this->jsonError($e);
		}
	}

    /**
     * Create
     */
	public function store(Store{{MODAL_CLASS}}Request $request): JsonResponse
	{
		try {
            ${{MODAL_CLASS_PARAM}} = $this->{{MODAL_CLASS_PARAM}}Repository->store($request->validated());

			return $this->jsonData(${{MODAL_CLASS_PARAM}}, trans('messages.create'));
		} catch (\Exception $e) {
			return $this->jsonError($e);
		}
	}

	/**
	 * Get
	 */
	public function show(int ${{MODAL_CLASS_PARAM}}, Request $request): JsonResponse
	{
		try {
		    ${{MODAL_CLASS_PARAM}} = $this->{{MODAL_CLASS_PARAM}}Repository->show(${{MODAL_CLASS_PARAM}}, $request->get('relationship', []));

			return $this->jsonData(${{MODAL_CLASS_PARAM}});
		} catch (\Exception $e) {
			return $this->jsonError($e);
		}
	}

	/**
	 * Update
	 */
	public function update(int ${{MODAL_CLASS_PARAM}}, Store{{MODAL_CLASS}}Request $request): JsonResponse
	{
		try {
		    ${{MODAL_CLASS_PARAM}} = $this->{{MODAL_CLASS_PARAM}}Repository->update(${{MODAL_CLASS_PARAM}}, $request->validated());

			return $this->jsonData(${{MODAL_CLASS_PARAM}}, trans('messages.update'));
		} catch (\Exception $e) {
			return $this->jsonError($e);
		}
	}

	/**
	 * Delete
	 */
    public function destroy(int ${{MODAL_CLASS_PARAM}}): JsonResponse
    {
	    try {
			$this->{{MODAL_CLASS_PARAM}}Repository->destroy(${{MODAL_CLASS_PARAM}});

		    return $this->jsonMessage(trans('messages.delete'));
	    } catch (\Exception $e) {
	    	return $this->jsonError($e);
	    }
    }
}

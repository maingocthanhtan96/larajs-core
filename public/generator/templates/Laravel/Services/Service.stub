<?php

namespace App\Services\{{VERSION}}\{{MODEL_CLASS}};

use App\Http\Requests\{{VERSION}}\Store{{MODEL_CLASS}}Request;
use App\Models\{{MODEL_CLASS}};
use App\Repositories\{{MODEL_CLASS}}\{{MODEL_CLASS}}RepositoryInterface;
use App\Services\BaseService;
use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Http\Request;

class {{MODEL_CLASS}}Service extends BaseService implements {{MODEL_CLASS}}ServiceInterface
{
    /**
     * @param  {{MODEL_CLASS}}RepositoryInterface<{{MODEL_CLASS}}>  ${{MODEL_CLASS_PARAM}}Repository
     */
    public function __construct(private readonly {{MODEL_CLASS}}RepositoryInterface ${{MODEL_CLASS_PARAM}}Repository)
    {
    }

    /**
     * @param  Request  $request
     * @return LengthAwarePaginator|Collection
     */
    public function findAll(Request $request): LengthAwarePaginator|Collection
    {
        return $this->{{MODEL_CLASS_PARAM}}Repository->findAll($request);
    }

    /**
     * @param  array $data
     * @return {{MODEL_CLASS}}
     */
    public function create(array $data): {{MODEL_CLASS}}
    {
        return $this->{{MODEL_CLASS_PARAM}}Repository->create($data);
    }

    /**
     * @param int $id
     * @param Request $request
     * @return {{MODEL_CLASS}}
     */
    public function find(int $id, Request $request): {{MODEL_CLASS}}
    {
        return $this->{{MODEL_CLASS_PARAM}}Repository->find($id, $request);
    }

    /**
     * @param  int  $id
     * @param  array  $data
     * @return {{MODEL_CLASS}}
     */
    public function update(int $id, array $data): {{MODEL_CLASS}}
    {
        return $this->{{MODEL_CLASS_PARAM}}Repository->update($id, $data);
    }

    /**
     * @param  int $id
     * @return bool
     */
    public function delete(int $id): bool
    {
        return $this->{{MODEL_CLASS_PARAM}}Repository->delete($id);
    }
}
